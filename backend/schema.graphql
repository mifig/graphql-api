type Blog {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  reviews: [Review!]
  title: String
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
Autogenerated input type of BlogCreate
"""
input BlogCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  data: CreateBlogInput!
}

"""
Autogenerated return type of BlogCreate.
"""
type BlogCreatePayload {
  blog: Blog!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of BlogDelete
"""
input BlogDeleteInput {
  blogId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of BlogDelete.
"""
type BlogDeletePayload {
  blog: Blog!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of BlogUpdate
"""
input BlogUpdateInput {
  blogId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  data: UpdateBlogInput!
}

"""
Autogenerated return type of BlogUpdate.
"""
type BlogUpdatePayload {
  blog: Blog!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Attributes for creating a blog
"""
input CreateBlogInput {
  description: String
  title: String!
}

"""
Attributes for creating a registration (user).
"""
input CreateRegistrationInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
Attributes for creating a session.
"""
input CreateSessionInput {
  email: String!
  password: String!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  """
  Creates a new blog
  """
  blogCreate(
    """
    Parameters for BlogCreate
    """
    input: BlogCreateInput!
  ): BlogCreatePayload

  """
  Deletes a blog by ID
  """
  blogDelete(
    """
    Parameters for BlogDelete
    """
    input: BlogDeleteInput!
  ): BlogDeletePayload

  """
  Updates a blog by id
  """
  blogUpdate(
    """
    Parameters for BlogUpdate
    """
    input: BlogUpdateInput!
  ): BlogUpdatePayload

  """
  Registers a new user
  """
  registrationCreate(
    """
    Parameters for RegistrationCreate
    """
    input: RegistrationCreateInput!
  ): RegistrationCreatePayload

  """
  Deletes a user by ID
  """
  registrationDelete(
    """
    Parameters for RegistrationDelete
    """
    input: RegistrationDeleteInput!
  ): RegistrationDeletePayload

  """
  Updates a user by id
  """
  registrationUpdate(
    """
    Parameters for RegistrationUpdate
    """
    input: RegistrationUpdateInput!
  ): RegistrationUpdatePayload

  """
  Creates a session for a user and returns a JWToken representing that session
  """
  sessionCreate(
    """
    Parameters for SessionCreate
    """
    input: SessionCreateInput!
  ): SessionCreatePayload

  """
  Validates the JWToken and refreshes for a new one
  """
  sessionValidate(
    """
    Parameters for SessionValidate
    """
    input: SessionValidateInput!
  ): SessionValidatePayload
}

type Query {
  """
  Get a blog by ID.
  """
  blog(blogId: ID!): Blog

  """
  Get all blogs.
  """
  blogs: [Blog!]!

  """
  Get a review by ID.
  """
  review(id: ID!): Review

  """
  Get a user by ID.
  """
  user(userId: ID!): User
}

"""
Autogenerated input type of RegistrationCreate
"""
input RegistrationCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  data: CreateRegistrationInput!
}

"""
Autogenerated return type of RegistrationCreate.
"""
type RegistrationCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of RegistrationDelete
"""
input RegistrationDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of RegistrationDelete.
"""
type RegistrationDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of RegistrationUpdate
"""
input RegistrationUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String!
  data: UpdateRegistrationInput!
  userId: ID!
}

"""
Autogenerated return type of RegistrationUpdate.
"""
type RegistrationUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Review {
  blog: Blog!
  content: String
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
Autogenerated input type of SessionCreate
"""
input SessionCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  data: CreateSessionInput!
}

"""
Autogenerated return type of SessionCreate.
"""
type SessionCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
  user: User!
}

"""
Autogenerated input type of SessionValidate
"""
input SessionValidateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of SessionValidate.
"""
type SessionValidatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
  user: User!
}

"""
Attributes for updating a blog
"""
input UpdateBlogInput {
  description: String
  title: String
  userId: ID
}

"""
Attributes for updating a registration (user).
"""
input UpdateRegistrationInput {
  email: String
  firstName: String
  lastName: String
  password: String
}

type User {
  blogs: [Blog!]
  createdAt: ISO8601DateTime!
  email: String
  firstName: String
  fullName: String
  id: ID!
  lastName: String
  reviews: [Review!]
  updatedAt: ISO8601DateTime!
}
